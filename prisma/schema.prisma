// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @db.VarChar(25)
  email    String  @unique @db.VarChar(100)
  password String  @db.VarChar(255)
  phone    String  @db.VarChar(16)
  isAdmin  Boolean @default(false)

  // Relasi one-to-many Article
  articles  Article[]
  // Relasi one-to-many Campaign
  campaigns Campaign[]
  // Relasi one-to-many Comment
  comments  Comment[]
}

model Category {
  name  String @id @unique @db.VarChar(25)
  image String @db.VarChar(100)

  // Relasi many-to-many Article
  articles Article[]
}

model Article {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(50)
  content   String   @db.VarChar(5000)
  image     String   @db.VarChar(255)
  location  String   @default("Indonesia") @db.VarChar(100)
  createdAt DateTime @default(now())

  categoryName String //Foreign key category
  category     Category @relation(fields: [categoryName], references: [name])

  userId String // Foreign key user
  user   User   @relation(fields: [userId], references: [id])

  // Relasi one-to-many Comment
  comments Comment[]
}

model Campaign {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(50)
  content   String   @db.VarChar(5000)
  image     String   @db.VarChar(255)
  createdAt DateTime @default(now())

  // Relasi one-to-many User
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Comment {
  id   String @id @default(uuid())
  body String @db.VarChar(300)

  // Relasi one-to-many User
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relasi one-to-many Article
  articleId String
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now())
}
